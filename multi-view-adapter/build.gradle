/*
 * Copyright 2017 Riyaz Ahamed
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


apply plugin: 'com.android.library'

android {
  compileSdkVersion Config.COMPILE_SDK

  defaultConfig {
    minSdkVersion Config.MIN_SDK
    targetSdkVersion Config.TARGET_SDK
  }
  buildTypes {
    debug {
      testCoverageEnabled true
    }
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  testOptions {
    unitTests {
      includeAndroidResources = true
    }
  }
}

dependencies {
  implementation Config.RECYCLER_VIEW

  testImplementation 'junit:junit:4.12'
  testImplementation 'org.mockito:mockito-core:2.18.3'
}

publish {
  userOrg = Config.USER_ORG
  groupId = Config.GROUP_ID
  artifactId = Config.ARTIFACT_ID_CORE
  publishVersion = Config.PRODUCTION_VERSION
  repoName = Config.REPO_NAME
  desc = Config.DESC
  website = Config.WEBSITE
}

version = Config.SNAPSHOT_VERSION
group = Config.GROUP_ID

artifactoryPublish {
  artifactId = Config.ARTIFACT_ID_CORE
  artifactoryRepo = "oss-snapshot-local"
  artifactoryUrl = "https://oss.jfrog.org/artifactory/"
  publications = ["releaseAar"]
}

afterEvaluate { project ->
  task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.source
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
  }

  task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    androidJavadocs.setDestinationDir(file("javadocs"))
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
  }

  task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.source
  }

  if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
      tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
    }
  }

  artifacts {
    if (project.getPlugins().hasPlugin('com.android.application') || project.getPlugins().
        hasPlugin('com.android.library')) {
      archives androidSourcesJar
      archives androidJavadocsJar
    } else {
      archives sourcesJar
      archives javadocJar
    }
  }
}